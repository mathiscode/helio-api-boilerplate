!function(e){var t={};function s(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,o){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(s.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(o,n,function(t){return e[t]}.bind(null,n));return o},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=13)}([function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("winston")},function(e,t){e.exports=require("express-jwt")},function(e){e.exports={name:"helio-api-boilerplate",version:"0.3.1",description:"Extensible backend boilerplate utilizing Express.js, Mongoose, JWT, and User registration/authentication",main:"dist/index.js",scripts:{start:"npm run server:prod",server:"cross-env NODE_ENVIRONMENT=development nodemon --exec babel-node --require node_modules/dotenv/config src/index.js","server:prod":"node -r dotenv/config dist/index.js",clean:"rimraf dist",transpile:"webpack",build:"cross-env NODE_ENV=production npm-run-all clean transpile",test:"standard && cross-env NODE_ENV=testing PORT=0 mocha --require @babel/register --require dotenv/config --exit","test:mods":"npm-run-all test:mods:users test:mods:blog","test:mods:users":"newman run -e test/postman/postman_environment.json test/postman/collections/UsersMod.json","test:mods:blog":"newman run -e test/postman/postman_environment.json test/postman/collections/BlogMod.json","test:mods:staging":"npm-run-all test:mods:staging:users test:mods:staging:blog","test:mods:staging:users":"newman run -e test/postman/postman_environment_staging.json test/postman/collections/UsersMod.json","test:mods:staging:blog":"newman run -e test/postman/postman_environment_staging.json test/postman/collections/BlogMod.json","test:mods:prod":"npm-run-all test:mods:prod:users test:mods:prod:blog","test:mods:prod:users":"newman run -e test/postman/postman_environment_prod.json test/postman/collections/UsersMod.json","test:mods:prod:blog":"newman run -e test/postman/postman_environment_prod.json test/postman/collections/BlogMod.json",commit:"commit-wizard"},repository:{type:"git",url:"git+https://github.com/mathiscode/helio-api-boilerplate.git"},author:"J.R. Mathis",license:"MIT",bugs:{url:"https://github.com/mathiscode/helio-api-boilerplate/issues"},homepage:"https://github.com/mathiscode/helio-api-boilerplate#readme",standard:{ignore:["/dist"]},dependencies:{"@babel/polyfill":"^7.4.4",bcryptjs:"^2.4.3","body-parser":"^1.19.0","cross-env":"^5.2.0",dotenv:"^7.0.0",express:"^4.16.4","express-jwt":"^5.3.1","express-rate-limit":"^4.0.1","helio-mod-jokes":"^1.0.0","helio-mod-users":"^1.1.1",jsonwebtoken:"^8.5.1",mongoose:"^5.5.4","npm-run-all":"^4.1.5",rimraf:"^2.6.3",uuid:"^3.3.2",winston:"^3.2.1","winston-mongodb":"^5.0.0"},devDependencies:{"@babel/cli":"^7.4.4","@babel/core":"^7.4.4","@babel/node":"^7.2.2","@babel/preset-env":"^7.4.4","@babel/register":"^7.4.4","babel-loader":"^8.0.6",chai:"^4.2.0","chai-http":"^4.3.0","clean-webpack-plugin":"^2.0.2",eslint:"^5.16.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.17.2","eslint-plugin-node":"^9.1.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0",mocha:"^6.1.4",newman:"^4.5.0",nodemon:"^1.18.11","pre-git":"^3.17.1",standard:"^12.0.1",webpack:"^4.32.2","webpack-cli":"^3.3.2","webpack-node-externals":"^1.7.2"},release:{analyzeCommits:"simple-commit-message"},config:{"pre-git":{"pre-commit":["npm run build","npm test","git add ."]}}}},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("express-rate-limit")},function(e,t){e.exports=require("winston-mongodb")},function(e,t){e.exports=require("uuid")},function(e,t){e.exports=require("helio-mod-users")},function(e,t){e.exports=require("helio-mod-jokes")},function(e,t){e.exports=require("bcryptjs")},function(e,t){e.exports=require("@babel/polyfill")},function(e,t,s){"use strict";s.r(t);s(12);var o=s(4),n=s(1),r=s.n(n),i=s(5),a=s.n(i),d=s(0),l=s.n(d),c=s(3),u=s.n(c),p=s(2),m=s.n(p),h=s(6),g=s.n(h),b=s(7),f=s(8),v=s(9),y=s.n(v),S=s(10),x=s.n(S),w=s(11),j=s.n(w);const E=l.a.Schema({id:{type:String,index:!0,unique:!0},username:{type:String,index:!0,unique:!0},email:{type:String,index:!0,unique:!0},password:String,roles:[{type:String}],flags:{confirmed:{type:Boolean,default:!1}},profile:{name:String},settings:{},clientSettings:{},serverSettings:{}},{timestamps:!0});E.methods.validPassword=function(e){return j.a.compareSync(e,this.password)};var _=l.a.model("User",E);const M=l.a.Schema({id:{type:String,index:!0,unique:!0}},{timestamps:!0});var P=l.a.model("BlogPost",M);const O=l.a.Schema({token:{type:String,required:!0,unique:!0}},{timestamps:!0});O.index({createdAt:1},{expires:process.env.JWT_TIMEOUT||"1h"});var R=l.a.model("TokenWhitelist",O);const T=[{path:"/example",module:class{constructor(e){this.name=e.name||"Example Helio Mod";const t=this.router=r.a.Router();this.publicPaths=[e.path,new RegExp(`^${e.path}/.*`)],this.needModels=["User"],this.subSchemas={User:new l.a.Schema({myData:{field1:String,field2:{type:Number,required:!0},field3:{type:Date,default:Date.now},field4:Boolean,field5:[{type:String,default:"Field5 Data"}]}})},t.get("/",this.index.bind(this)),t.get("/add/:x/:y",this.add),t.get("/test-error",this.testError);const s=this;t.use((e,t,o,n)=>(t.Log.error(`[MOD ERROR] (${s.name}) ${e.stack}`),o.status(500).json({error:e.toString()})))}receiveModels(e){this.models={},this.subModels={},e.forEach(e=>{this.models[e.name]=e.model});for(const e in this.subSchemas){const t=this.models[e],s=this.subSchemas[e];this.subModels[e]=t.discriminator(this.name,s)}}index(e,t,s){const{user:o}=e;t.json({mod:this.name,user:o})}add(e,t,s){let{x:o,y:n}=e.params;o=parseFloat(o),n=parseFloat(n),t.json(o+n)}testError(e,t,s){s(new Error("Intentional Error"))}}},{path:"/user",module:y.a},{path:"/blog",module:class{constructor(e){this.name=e.name||"Helio Blog Mod";const t=this.router=r.a.Router();this.needModels=["BlogPost"],this.subSchemas={BlogPost:new l.a.Schema({owner:String,public:{type:Boolean,default:!0},title:{type:String,required:!0},excerpt:String,content:{type:String,required:!0}})},this.subSchemas.BlogPost.options.toJSON={transform:(e,t,s)=>(delete t._id,delete t.__v,delete t.__t,t)},t.get("/",this.getAllMyPosts.bind(this)),t.post("/",this.addPost.bind(this)),t.get("/:id",this.getPost.bind(this)),t.patch("/:id",this.updatePost.bind(this)),t.delete("/:id",this.deletePost.bind(this));const s=this;t.use((e,t,o,n)=>(t.Log.error(`[MOD ERROR] (${s.name}) ${e.stack}`),o.status(500).json({error:e.toString()})))}receiveModels(e){this.models={},this.subModels={},e.forEach(e=>{this.models[e.name]=e.model});for(const e in this.subSchemas){const t=this.models[e],s=this.subSchemas[e];this.subModels[e]=t.discriminator(this.name,s)}}async getAllMyPosts(e,t,s){try{const o=await this.subModels.BlogPost.find({owner:e.user.id}).sort({createdAt:"desc"});t.json(o)}catch(e){s(e)}}async addPost(e,t,s){try{const o=new this.subModels.BlogPost({id:Object(f.v4)(),owner:e.user.id,public:e.body.public||!0,title:e.body.title||"Untitled Blog Post",excerpt:e.body.excerpt?e.body.excerpt.substring(0,256):e.body.content.length>256?e.body.content.substring(0,256)+"...":null,content:e.body.content});await o.save(),t.json(o)}catch(e){s(e)}}async getPost(e,t,s){try{const o=await this.subModels.BlogPost.findOne({id:e.params.id,$or:[{owner:e.user.id},{public:!0}]});if(!o)return t.status(404).json({error:"Post not found"});t.json(o)}catch(e){s(e)}}async updatePost(e,t,s){try{const o=await this.subModels.BlogPost.findOneAndUpdate({id:e.params.id,owner:e.user.id},{...e.body},{new:!0});t.json(o)}catch(e){s(e)}}async deletePost(e,t,s){try{const o=await this.subModels.BlogPost.findOneAndRemove({id:e.params.id,owner:e.user.id});t.json(o)}catch(e){s(e)}}}},{path:"/jokes",module:x.a}],B=[{name:"User",model:_},{name:"BlogPost",model:P},{name:"TokenWhitelist",model:R}];let I=["/",...process.env.PUBLIC_PATHS?process.env.PUBLIC_PATHS.split(","):[]];const q=[],D=r()();l.a.set("useNewUrlParser",!0),l.a.set("useFindAndModify",!1),l.a.set("useCreateIndex",!0);let U=!1;process.env.DB_URI||(U="You must define a mongodb DB_URI environment variable"),process.env.JWT_SECRET||(U="You must define a JWT_SECRET environment variable"),U&&(console.error(U),process.exit(1));const k=[];"false"!==process.env.LOG_TO_DB&&k.push(new b.MongoDB({db:process.env.DB_URI})),k.push(new m.a.transports.Console({format:m.a.format.simple(),silent:"false"===process.env.CONSOLE_LOG}));const A=m.a.createLogger({format:m.a.format.json(),transports:k});A.info("Connecting to database..."),l.a.connect(process.env.DB_URI,e=>{e?(A.error(e.toString()),process.exit(2)):N()});const N=D.initializeServer=()=>{D.disable("x-powered-by"),D.use(a.a.json());const e=g()({windowMs:process.env.RATE_LIMIT_WINDOW||9e5,max:process.env.RATE_LIMIT_MAX_REQUESTS_PER_WINDOW||100,skip:(e,t)=>"127.0.0.1"===e.ip||"::1"===e.ip});D.use(e),D.use((e,t,s)=>{e.Log=A,s()}),T.forEach(e=>{let t=new(0,e.module)(e);const s=t.publicPaths||[];I=[...I,...s],t=null});D.use(u()({secret:process.env.JWT_SECRET,credentialsRequired:!1})),D.use(u()({secret:process.env.JWT_SECRET,isRevoked:async(e,t,s)=>{return s(null,!await R.countDocuments({token:e.headers.authorization.replace("Bearer ","")}))}}).unless({path:I})),T.forEach(e=>{const t=new(0,e.module)(e);if(t.receiveModels&&t.needModels){const e=B.filter(e=>t.needModels.includes(e.name));t.receiveModels(e)}D.use(e.path,t.router),A.info(`[MOD REGISTERED] ${t.name}`)}),D.get("/",(e,t)=>{t.json({name:process.env.NAME||"Helio API Server",version:"true"===process.env.SHOW_VERSION?o.version:null})}),q.forEach(e=>{D.use(e.path,e.module)}),D.use((e,t,s)=>{t.status(404).json({error:"Invalid API method"})}),D.use((e,t,s,o)=>("true"===process.env.CONSOLE_ERRORS&&"UnauthorizedError"!==e.name&&A.error("APP ERROR:",e.stack),"UnauthorizedError"===e.name?s.status(401).json({error:"Invalid token"}):s.status(500).json({error:"Internal API error"}))),D.listen(process.env.PORT||3001),A.info(`${process.env.NAME||"Helio API Server"} listening`)};t.default=D}]);